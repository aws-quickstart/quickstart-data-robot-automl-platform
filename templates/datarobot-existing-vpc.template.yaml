AWSTemplateFormatVersion: "2010-09-09"
Description: Parameters for deploying DataRobot into an existing VPC. (qs-1s36qjm1l) 
Metadata:
  QuickStartDocumentation:
    EntrypointName: "Parameters for launching into an existing VPC"
    Order: "2"
  QSLint:
    Exclusions: [ W9002, W9003, W9006 ]
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network and installation configurations
        Parameters:
          - VPCID
          - VPCCIDR
          - PrivateSubnet1ID
          - PrivateSubnet2ID
          - PublicSubnet1ID
          - PublicSubnet2ID
      - Label:
          default: Security configuration
        Parameters:
          - KeyPairName
      - Label:
          default: DataRobot installation configuration
        Parameters:
          - DRS3InstallationBucket
          - DRS3CreateBucket
          - DRSignedURL
      - Label:
          default: DataRobot front-end Application Load Balancer settings
        Parameters:
          - DRHTTPSetting
          - DRZone
          - DRAppName
          - DRPredName
          - DRLbCidr
      - Label:
          default: AWS Quick Start configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
          - QSS3BucketRegion
    ParameterLabels:
      DRSignedURL:
        default: Signed URL provided by DataRobot
      DRHTTPSetting:
        default: HTTP security settings 
      DRZone:
        default: Your domain name (required for HTTPS)
      DRAppName:
        default: Domain name for end-user application server (required for HTTPS) 
      DRPredName:
        default: Domain name for the prediction servers (required for HTTPS) 
      DRLbCidr:
        default: Allowed CIDR range for the front-end application and prediction service
      PublicSubnet1ID:
        default: Public subnet 1 ID
      PublicSubnet2ID:
        default: Public subnet 2 ID
      PrivateSubnet1ID:
        default: Private subnet 1 ID
      PrivateSubnet2ID:
        default: Private subnet 2 ID
      DRS3InstallationBucket:
        default: Bucket name for DataRobot installation S3 bucket
      DRS3CreateBucket:
        default: Do you want the Quick Start to create the bucket? 
      VPCID:
        default: VPC ID  
      VPCCIDR:
        default: VPC CIDR
      QSS3BucketName:
        default: Quick Start S3 bucket name
      QSS3KeyPrefix:
        default: Quick Start S3 key prefix
      QSS3BucketRegion:
        default: Quick Start S3 bucket Region
      KeyPairName:
        default: Key pair name
Parameters:
  PublicSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: ID of the public subnet in Availability Zone 1 of your existing VPC (for example, subnet-a0246dcd).
  PublicSubnet2ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: ID of the public subnet in Availability Zone 2 of your existing VPC (for example, subnet-b1236eea).
  PrivateSubnet1ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: ID of the private subnet in Availability Zone 1 of your existing VPC (for example, subnet-fe9a8b32).
  PrivateSubnet2ID:
    Type: "AWS::EC2::Subnet::Id"
    Description: ID of the private subnet in Availability Zone 2 of your existing VPC (for example, subnet-be8b01ea).
  VPCID:
    Type: "AWS::EC2::VPC::Id"
    Description: ID of your existing VPC (for example, vpc-0343606e).
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28.
    Description: CIDR block for the VPC.
    Type: String
  KeyPairName:
    Description: Name of an existing public/private key pair. If you do not have one in this AWS Region,
      create it before continuing.
    Type: 'AWS::EC2::KeyPair::KeyName'
  DRHTTPSetting:
    AllowedValues:
      - 'HTTPS'
      - 'HTTP'
    Default: 'HTTPS'
    Description: Select HTTPS for secured access with certificate, or HTTP (not recommended) for insecure port 80 access.
    Type: String
  DRZone:
    Description: (Required for HTTPS) Enter a DNS zone that you control with a trailing '.' (for example, example.com.).
    Type: String
    Default: ''
  DRAppName:
    Description: (Required for HTTPS) Enter the domain name you want to use for the end-user application server (for example, datarobot.example.com).
    Type: String
    Default: ''
  DRPredName:
    Description: (Required for HTTPS) Enter the domain name you want to use for the prediction servers (for example, prediction.example.com).
    Type: String
    Default: ''
  DRS3InstallationBucket:
    Default: ''
    Description:
      Name of the non-public S3 bucket you want to use to upload data and store configuration. The account used for the Quick Start must be able to assign
      permissions for accessing a role for the EC2 instances.
    Type: String
  DRS3CreateBucket:
    Default: "False"
    AllowedValues:
      - "False"
      - "True"
    Description: Choose True if you don't already have an S3 bucket and want the Quick Start to create one for you. 
    Type: String
  DRVersion:
    Type: String
    Description: DataRobot version to install
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})'
    #Default: 7.0.2
    Default: 7.1.1
  DRSignedURL:
    Type: String
    Description: Presigned URL sent by DataRobot to download software.
  DRLbCidr:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]{1}|[1-2][0-8]{2}))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/0-28.
    Description: CIDR block to allow access to front-end application and prediction services.
    Type: String
  QSS3BucketName:
    AllowedPattern: '^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$'
    ConstraintDescription:
      The Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a 
      hyphen (-).
    Default: aws-quickstart
    Description:
      Name of the S3 bucket for your copy of the Quick Start assets. 
      Keep the default name unless you are customizing the template. 
      Changing the name updates code references to point to a new Quick 
      Start location. This name can include numbers, lowercase letters, 
      uppercase letters, and hyphens, but do not start or end with a hyphen (-). 
      See https://aws-quickstart.github.io/option1.html.
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: '^[0-9a-zA-Z-/]*$'
    Type: String
    ConstraintDescription:
      The Quick Start S3 key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slashes (/). The prefix should
      end with a forward slash (/).
    Default: quickstart-data-robot-automl-platform/
    Description:
      S3 key prefix that is used to simulate a directory for your copy of the 
      Quick Start assets. Keep the default prefix unless you are customizing 
      the template. Changing this prefix updates code references to point to 
      a new Quick Start location. This prefix can include numbers, lowercase 
      letters, uppercase letters, hyphens (-), and forward slashes (/). End with 
      a forward slash. See https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html 
      and https://aws-quickstart.github.io/option1.html.
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'AWS Region where the Quick Start S3 bucket (QSS3BucketName) is 
      hosted. Keep the default Region unless you are customizing the template. 
      Changing this Region updates code references to point to a new Quick Start location. 
      When using your own bucket, specify the Region. 
      See https://aws-quickstart.github.io/option1.html.'
    Type: String

Conditions:
  CreateS3BucketCondition: !Equals 
    - !Ref DRS3CreateBucket
    - "True"    
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
  UseHTTPS: !Equals 
    - !Ref DRHTTPSetting
    - "HTTPS"
  UseHTTP: !Equals
    - !Ref DRHTTPSetting
    - "HTTP"

# Use Centos 8.2.2004 as most stable version for Data Robot 7.0.2
Mappings: 
  RegionMap: 
    us-east-1: 
      "Centos": "ami-01ca03df4a6012157"
    us-east-2: 
      "Centos": "ami-000e7ce4dd68e7a11"
    us-west-1:
      "Centos": "ami-04179d30492b778ad"
    us-west-2:
      "Centos": "ami-0157b1e4eefd91fd7"
    eu-west-1:
      "Centos": "ami-0bfa4fefe067b7946"
    eu-west-2:
      "Centos": "ami-0eee2548cd75b4877"
    eu-west-3:
      "Centos": "ami-05786aa5add3ca7c8"
    eu-south-1:
      "Centos": "ami-00fd0c9036a37a48e"   
    eu-north-1:
      "Centos": "ami-0474ce84d449ee66f"
    sa-east-1:
      "Centos": "ami-005c6439e527f2704"
    ap-northeast-1:
      "Centos": "ami-089a156ea4f52a0a3"
    ap-northeast-2:
      "Centos": "ami-09cdc4034bbb65412"
    

Resources:

  AMIWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle
  AMIWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    Properties:
      Handle: !Ref AMIWaitHandle
      Timeout: '6000'
      Count: 1

  CreateModelAutoscale:
    Type: AWS::CloudFormation::Stack
    DependsOn: AMIWaitCondition
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-autoscale.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      TimeoutInMinutes: 120
      Parameters:
        PrivateSubnet1ID: !Ref PrivateSubnet1ID
        PrivateSubnet2ID: !Ref PrivateSubnet2ID
        MaxModelingNodes: 5
        MainStack: !Ref AWS::StackName
        KeyPairName: !Ref KeyPairName
        IamArn: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfileARN'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        
      
  S3Bucket:
    Type: AWS::S3::Bucket
    Condition: CreateS3BucketCondition
    Properties:
      AccessControl: Private
      # BucketName: !Ref DRS3InstallationBucket

  SecurityStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TimeoutInMinutes: 10
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-securitygroup.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        MainStack: !Ref AWS::StackName
        VpcId: !Ref VPCID
        # CidrBlock: 0.0.0.0/0
        CidrBlock: !Ref VPCCIDR

  IAMStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TimeoutInMinutes: 15
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/quickstart-data-robot-automl-platform/templates/datarobot-iam.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        MainStack: !Ref AWS::StackName
        # S3Bucket: !Ref DRS3InstallationBucket
        S3Bucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        QSS3BucketName: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        
  AppNode:
    Type: AWS::CloudFormation::Stack
    DependsOn: AppPasswd
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-appnode.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      TimeoutInMinutes: 120
      Parameters:
        InstanceType: r5.2xlarge
        Region: !Ref "AWS::Region"
        MainStack: !Ref AWS::StackName
        SubnetId: !Ref PrivateSubnet1ID
        Encrypted: true
        EncryptionKey: ' '
        SSHKey: !Ref KeyPairName
        QSInstallationBucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
        # DRInstallationBucket: !Ref DRS3InstallationBucket
        DRInstallationBucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Centos]
        DownloadURL: !Ref DRSignedURL
        EC2InstanceSecurityProfile: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfile'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        PredName: !If [UseHTTPS, !Ref DRPredName , !GetAtt 'PredLoadBalancer.DNSName' ]
        AppName: !If [UseHTTPS, !Ref DRAppName , !GetAtt 'AppLoadBalancer.DNSName' ]
        UseAutoScaling: "true"
        MetricNamespace: "DataRobot/AutoScaling/Quickstart"
        ClusterType: "QuickStart"  
        StorageType: "s3bucket" 
        DRHTTPSetting: !Ref DRHTTPSetting
        AdminPassword: !Sub '{{resolve:secretsmanager:${AppPasswd}::password}}'
        # Defaults
        DRVersion: !Ref DRVersion
        NodeVolumeSize: 60
        DataVolumeSize: 200
        PublicIpAddress: false
        SecretsEnforced: true
        BackupDir: "backup_files"
        StorageDir: "datarobot_storage"
        UseS3BucketBackups: true
        S3BucketBackupSchedule: "0 0 * * 1-5"

      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-AppNode
        - Key: MainStack
          Value: !Ref AWS::StackName
        - Key: NodeType
          Value: DataRobot


  DedicatedPredictionServerStack1:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-node.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        Region: !Ref "AWS::Region"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Centos]
        # InstallationBucket: !Ref DRS3InstallationBucket
        InstallationBucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        InstanceType: r5.xlarge
        MainStack: !Ref AWS::StackName
        ServerName: DedicatedPredictionServer1
        SSHKey: !Ref KeyPairName
        SubnetId: !Ref PrivateSubnet1ID
        Encrypted: true
        EncryptionKey: ' '
        AmiSignalHandle: ' '
        EC2InstanceSecurityProfile: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfile'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        # Defaults
        DRVersion: !Ref DRVersion
        NodeVolumeSize: 60
        DataVolumeSize: 100
        PublicIpAddress: false
        BackupDir: "backup_files"
        StorageDir: "datarobot_storage"
        UseS3BucketBackups: true
        S3BucketBackupSchedule: "0 0 * * 1-5"
        TagDataVol: false
      Tags:
        # DataRobot tags
        - Key: Name
          Value: !Sub ${AWS::StackName}-DedicatedPredictionServer1
        - Key: MainStack
          Value: !Ref AWS::StackName
        - Key: NodeType
          Value: DataRobot

  DedicatedPredictionServerStack2:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-node.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        Region: !Ref "AWS::Region"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Centos]
        # InstallationBucket: !Ref DRS3InstallationBucket
        InstallationBucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        InstanceType: r5.xlarge
        MainStack: !Ref AWS::StackName
        ServerName: DedicatedPredictionServer2
        SSHKey: !Ref KeyPairName
        SubnetId: !Ref PrivateSubnet2ID
        Encrypted: true
        EncryptionKey: ' '
        AmiSignalHandle: ' '
        EC2InstanceSecurityProfile: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfile'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        # Defaults
        DRVersion: !Ref DRVersion
        NodeVolumeSize: 60
        DataVolumeSize: 100
        PublicIpAddress: false
        BackupDir: "backup_files"
        StorageDir: "datarobot_storage"
        UseS3BucketBackups: true
        S3BucketBackupSchedule: "0 0 * * 1-5"
        TagDataVol: false    
      Tags:
        # DataRobot tags
        - Key: Name
          Value: !Sub ${AWS::StackName}-DedicatedPredictionServer2
        - Key: MainStack
          Value: !Ref AWS::StackName
        - Key: NodeType
          Value: DataRobot

# Configured for 4 workers each, total of 8
  ModelingNode1Stack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-node.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        Region: !Ref "AWS::Region"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Centos]
        # InstallationBucket: !Ref DRS3InstallationBucket
        InstallationBucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        InstanceType: r5.2xlarge
        MainStack: !Ref AWS::StackName
        ServerName: ModelingNode1
        SSHKey: !Ref KeyPairName
        SubnetId: !Ref PrivateSubnet1ID
        Encrypted: true
        EncryptionKey: ' '
        AmiSignalHandle: ' '
        EC2InstanceSecurityProfile: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfile'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        # Defaults
        DRVersion: !Ref DRVersion
        NodeVolumeSize: 60
        DataVolumeSize: 100
        PublicIpAddress: false
        BackupDir: "backup_files"
        StorageDir: "datarobot_storage"
        UseS3BucketBackups: true
        S3BucketBackupSchedule: "0 0 * * 1-5"
        TagDataVol: false  
      Tags:
        # DataRobot tags
        - Key: Name
          Value: !Sub ${AWS::StackName}-ModelingNode1
        - Key: MainStack
          Value: !Ref AWS::StackName
        - Key: NodeType
          Value: DataRobot


  ModelingNode2Stack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-node.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        Region: !Ref "AWS::Region"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Centos]
        # InstallationBucket: !Ref DRS3InstallationBucket
        InstallationBucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        InstanceType: r5.2xlarge
        MainStack: !Ref AWS::StackName
        ServerName: ModelingNode2
        SSHKey: !Ref KeyPairName
        SubnetId: !Ref PrivateSubnet2ID
        Encrypted: true
        EncryptionKey: ' '
        AmiSignalHandle: ' '
        EC2InstanceSecurityProfile: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfile'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        # Defaults
        DRVersion: !Ref DRVersion
        NodeVolumeSize: 60
        DataVolumeSize: 100
        PublicIpAddress: false
        BackupDir: "backup_files"
        StorageDir: "datarobot_storage"
        UseS3BucketBackups: true
        S3BucketBackupSchedule: "0 0 * * 1-5"
        TagDataVol: false  
      Tags:
        # DataRobot tags
        - Key: Name
          Value: !Sub ${AWS::StackName}-ModelingNode2
        - Key: MainStack
          Value: !Ref AWS::StackName
        - Key: NodeType
          Value: DataRobot


# Added to allow for AutoScaling
  ModelingOnlyNodeStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-node.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        Region: !Ref "AWS::Region"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Centos]
        # InstallationBucket: !Ref DRS3InstallationBucket
        InstallationBucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        InstanceType: r5.2xlarge
        MainStack: !Ref AWS::StackName
        ServerName: ModelingOnly
        SSHKey: !Ref KeyPairName
        SubnetId: !Ref PrivateSubnet1ID
        Encrypted: true
        EncryptionKey: ' '
        AmiSignalHandle: !Join
          - ''
          - - !Ref AMIWaitHandle
        EC2InstanceSecurityProfile: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfile'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        # Defaults
        DRVersion: !Ref DRVersion
        NodeVolumeSize: 60
        DataVolumeSize: 100
        PublicIpAddress: false
        BackupDir: "backup_files"
        StorageDir: "datarobot_storage"
        UseS3BucketBackups: false
        S3BucketBackupSchedule: "0 0 * * 1-5"
        TagDataVol: false   
      Tags:
        # DataRobot tags
        - Key: Name
          Value: !Sub ${AWS::StackName}-ModelingOnlyNode
        - Key: MainStack
          Value: !Ref AWS::StackName
        - Key: NodeType
          Value: DataRobot  

  DataNodeStack1:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-node.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        Region: !Ref "AWS::Region"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Centos]
        # InstallationBucket: !Ref DRS3InstallationBucket
        InstallationBucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        InstanceType: c5.xlarge
        MainStack: !Ref AWS::StackName
        ServerName: DataNode1
        SSHKey: !Ref KeyPairName
        SubnetId: !Ref PrivateSubnet1ID
        Encrypted: true
        EncryptionKey: ' '
        AmiSignalHandle: !Ref AMIWaitHandle
        EC2InstanceSecurityProfile: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfile'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        # Defaults
        DRVersion: !Ref DRVersion
        NodeVolumeSize: 60
        DataVolumeSize: 100
        PublicIpAddress: false
        BackupDir: "backup_files"
        StorageDir: "datarobot_storage"
        UseS3BucketBackups: true
        S3BucketBackupSchedule: "0 0 * * 1-5"
        TagDataVol: false  
      Tags:
        # DataRobot tags
        - Key: Name
          Value: !Sub ${AWS::StackName}-DataNode1
        - Key: MainStack
          Value: !Ref AWS::StackName
        - Key: NodeType
          Value: DataRobot  

  DataNodeStack2:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-node.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        Region: !Ref "AWS::Region"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Centos]
        # InstallationBucket: !Ref DRS3InstallationBucket
        InstallationBucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        InstanceType: c5.xlarge
        MainStack: !Ref AWS::StackName
        ServerName: DataNode2
        SSHKey: !Ref KeyPairName
        SubnetId: !Ref PrivateSubnet2ID
        Encrypted: true
        EncryptionKey: ' '
        AmiSignalHandle: !Ref AMIWaitHandle
        EC2InstanceSecurityProfile: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfile'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        # Defaults
        DRVersion: !Ref DRVersion
        NodeVolumeSize: 60
        DataVolumeSize: 100
        PublicIpAddress: false
        BackupDir: "backup_files"
        StorageDir: "datarobot_storage"
        UseS3BucketBackups: true
        S3BucketBackupSchedule: "0 0 * * 1-5"
        TagDataVol: false  
      Tags:
        # DataRobot tags
        - Key: Name
          Value: !Sub ${AWS::StackName}-DataNode2
        - Key: MainStack
          Value: !Ref AWS::StackName
        - Key: NodeType
          Value: DataRobot  

  DataNodeStack3:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: !Sub
        - 'https://${S3Bucket}.s3.${S3Region}.${AWS::URLSuffix}/${QSS3KeyPrefix}templates/datarobot-node.template.yaml'
        - S3Region: !If [UsingDefaultBucket, !Ref 'AWS::Region', !Ref QSS3BucketRegion]
          S3Bucket: !If [UsingDefaultBucket, !Sub '${QSS3BucketName}-${AWS::Region}', !Ref QSS3BucketName]
      Parameters:
        Region: !Ref "AWS::Region"
        ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", Centos]
        # InstallationBucket: !Ref DRS3InstallationBucket
        InstallationBucket: !If [CreateS3BucketCondition, !Ref 'S3Bucket', !Ref DRS3InstallationBucket]
        InstanceType: c5.xlarge
        MainStack: !Ref AWS::StackName
        ServerName: DataNode3
        SSHKey: !Ref KeyPairName
        SubnetId: !Ref PrivateSubnet1ID
        Encrypted: true
        EncryptionKey: ' '
        AmiSignalHandle: !Ref AMIWaitHandle
        EC2InstanceSecurityProfile: !GetAtt 'IAMStack.Outputs.EC2InstanceSecurityProfile'
        EC2SecurityGroup: !GetAtt 'SecurityStack.Outputs.EC2SecurityGroupId'
        # Defaults
        DRVersion: !Ref DRVersion
        NodeVolumeSize: 60
        DataVolumeSize: 100
        PublicIpAddress: false
        BackupDir: "backup_files"
        StorageDir: "datarobot_storage"
        UseS3BucketBackups: true
        S3BucketBackupSchedule: "0 0 * * 1-5"
        TagDataVol: false  
      Tags:
        # DataRobot tags
        - Key: Name
          Value: !Sub ${AWS::StackName}-DataNode3
        - Key: MainStack
          Value: !Ref AWS::StackName
        - Key: NodeType
          Value: DataRobot

##### Load Balancer for Dedicated Predicion Servers

  PredLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Subnets:
        - Ref: PublicSubnet1ID
        - Ref: PublicSubnet2ID
      Type: application
      SecurityGroups:
        - Ref: LBSG      
  
  PredTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: !If [ UseHTTPS, '443', '80' ]
      HealthCheckProtocol: !If [ UseHTTPS, 'HTTPS', 'HTTP' ]
      Port: !If [ UseHTTPS, 443, 80 ]
      Protocol: !If [ UseHTTPS, 'HTTPS', 'HTTP' ]
      VpcId: !Ref VPCID
      TargetType: instance
      Targets:
        - Id: !GetAtt 'DedicatedPredictionServerStack1.Outputs.InstanceId'
          Port: !If [ UseHTTPS, 443, 80 ]        
        - Id: !GetAtt 'DedicatedPredictionServerStack2.Outputs.InstanceId'
          Port: !If [ UseHTTPS, 443, 80 ]
  
  PredLBListenerHTTP:
    Condition: UseHTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: PredTargetGroup
      LoadBalancerArn:
        Ref: PredLoadBalancer
      Port: 80
      Protocol: HTTP
  
  PredRedirect:
    Condition: UseHTTPS
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: '443'
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: 
        Ref: PredLoadBalancer
      Port: 80
      Protocol: 'HTTP'

  PredLBListenerHTTPS:
    Condition: UseHTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: PredTargetGroup
      LoadBalancerArn:
        Ref: PredLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref PredLBCertificate
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06

  PredLBCertificate:
    Condition: UseHTTPS
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DRPredName
      ValidationMethod: DNS

  PredLBRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: UseHTTPS
    Properties:
      Name: !Ref DRPredName
      HostedZoneName: !Ref DRZone
      ResourceRecords:
        - !GetAtt 'PredLoadBalancer.DNSName'
      TTL: 900
      Type: CNAME


##### Load Balancer for App Servers

  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Subnets:
        - Ref: PublicSubnet1ID
        - Ref: PublicSubnet2ID
      Type: application
      SecurityGroups:
        - Ref: LBSG      
  
  AppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPort: !If [ UseHTTPS, '443', '80' ]
      HealthCheckProtocol: !If [ UseHTTPS, 'HTTPS', 'HTTP' ]
      Port: !If [ UseHTTPS, 443, 80 ]
      Protocol: !If [ UseHTTPS, 'HTTPS', 'HTTP' ]
      VpcId: !Ref VPCID
      TargetType: instance
      Targets:
        - Id: !GetAtt 'AppNode.Outputs.InstanceId'
          Port: !If [ UseHTTPS, 443, 80 ]        
        
  AppLBListenerHTTP:
    Condition: UseHTTP
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: AppTargetGroup
      LoadBalancerArn:
        Ref: AppLoadBalancer
      Port: 80
      Protocol: HTTP
  
  AppRedirect:
    Condition: UseHTTPS
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "redirect"
          RedirectConfig:
            Protocol: "HTTPS"
            Port: '443'
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: 
        Ref: AppLoadBalancer
      Port: 80
      Protocol: 'HTTP'

  AppLBListenerHTTPS:
    Condition: UseHTTPS
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: AppTargetGroup
      LoadBalancerArn:
        Ref: AppLoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref AppLBCertificate
      SslPolicy: ELBSecurityPolicy-TLS-1-2-Ext-2018-06

  AppLBCertificate:
    Condition: UseHTTPS
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DRAppName
      ValidationMethod: DNS

  AppLBRoute53Record:
    Type: AWS::Route53::RecordSet
    Condition: UseHTTPS
    Properties:
      Name: !Ref DRAppName
      HostedZoneName: !Ref DRZone
      ResourceRecords:
        - !GetAtt 'AppLoadBalancer.DNSName'
      TTL: 900
      Type: CNAME


  LBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupName: !Sub ${AWS::StackName}-LBSG
      GroupDescription: !Sub ${AWS::StackName}-SecurityGroup
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref DRLbCidr
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref DRLbCidr

  AppPasswd:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: 'DataRobotUserPassword'
      Description: "This is a dynamic random password for localadmin@datarobot.com"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "localadmin@datarobot.com"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludePunctuation: true



Outputs:
  MainTemplate:
    Description: Main template complete
    Value: MainTemplate
  AppLoadBalancerURL:
    Description: "URL of the application load balancer. Use this URL to access the application."
    Value: !GetAtt AppLoadBalancer.DNSName
  AdminPasswordSecretName:
    Description: "The name of the secret that holds the password for localadmin@datarobot.com"
    Value: 'DataRobotUserPassword'






    
    